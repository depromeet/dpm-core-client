name: Deploy Vercel

on:
  workflow_call:
    inputs:
      user_name:
        required: true
        type: string
      stage: # preview | production
        required: true
        type: string
      app:
        required: false
        type: string
    secrets:
      VERCEL_TOKEN:
        required: true
      VERCEL_PROJECT_ID_ADMIN:
        required: true
      VERCEL_PROJECT_ID_CLIENT:
        required: true
      VERCEL_ORG_ID:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: admin
            project_env: VERCEL_PROJECT_ID_ADMIN
          - name: client
            project_env: VERCEL_PROJECT_ID_CLIENT

    steps:
      - name: checkout repository 
        uses: actions/checkout@v4

      - name: setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: install dependencies
        run: pnpm install --frozen-lockfile

      - name: Pull Vercel Environment
        if: ${{ inputs.app == matrix.name || inputs.app == 'all' }}
        run: pnpm dlx vercel@latest pull --yes --environment=${{ inputs.stage }} --token=$VERCEL_TOKEN
        env:
          VERCEL_PROJECT_ID: ${{ secrets[matrix.project_env] }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Build Project (Prebuilt)
        if: ${{ inputs.app == matrix.name || inputs.app == 'all' }}
        run: pnpm dlx vercel@latest build --token=$VERCEL_TOKEN
        env:
          VERCEL_PROJECT_ID: ${{ secrets[matrix.project_env] }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Prebuilt to Vercel
        if: ${{ inputs.app == matrix.name || inputs.app == 'all' }}
        run: |
          if [ "${{ inputs.stage }}" = "production" ]; then
            if [ "$GITHUB_REF" = "refs/heads/main" ]; then
              pnpm dlx vercel@latest deploy --prebuilt --prod --token=$VERCEL_TOKEN
            else
              echo "❌ Production 배포는 main 브랜치에서만 가능합니다."
              exit 1
            fi
          else
            pnpm dlx vercel@latest deploy --prebuilt --token=$VERCEL_TOKEN
          fi
        env:
          VERCEL_PROJECT_ID: ${{ secrets[matrix.project_env] }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
